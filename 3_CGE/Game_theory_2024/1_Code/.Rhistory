)
# Merging datasets by 'Country' and 'SPI_year'
Basic_Human_Needs <- SPI_Time_Series
for (dataset in datasets) {
Basic_Human_Needs <- left_join(Basic_Human_Needs, dataset, by = c("Country", "SPI_year"))
}
View(Basic_Human_Needs)
setwd("C:/runGTAP375/Game_theory_2024/1_Code")
setwd("C:/Users/etber/Roots_Documents/GitHub/eudemonic")
rm(list = ls())
# Load required packages
library(dplyr)
library(readxl)
# Define file paths
data_dir <- "Data/"
files <- list(
SPI_Time_Series = paste0(data_dir, "Copy of SPI Time Series 1990-2020 data file to take notes.xlsx"),
caloric_supply = paste0(data_dir, "daily-per-capita-caloric-supply.csv"),
healthy_life_expectancy = paste0(data_dir, "Health Life Expectance (HALE) at birth.csv"),
protein_supply = paste0(data_dir, "protein_supply.csv"),
child_mortality = paste0(data_dir, "Under Five child mortality Rate (WHO).csv"),
physicians = paste0(data_dir, "Number of Physicians per 1000 people.csv"),
hospital_beds = paste0(data_dir, "Number of Hospital Beds per 1000 people.csv")
#essential_health_services = paste0(data_dir, "Coverage of Essential Health Services.xlsx")
)
# Import SPI
SPI_Time_Series <- read_excel(files$SPI_Time_Series, sheet = "1990-2020 Time-series data")[, 1:42] %>%
select(-c(9:11, 16:24)) %>%
setNames(.[1, ]) %>% # Rename columns using the first row
slice(-1) %>%
rename("SPI_year" = "SPI \r\nyear",
"SPI_rank" = "SPI\r\nRank",
"SPI_countrycode" = "SPI \r\ncountry \r\ncode"
)
# Checking work
head(SPI_Time_Series)
# Change rank and year into integer values and all other numeric SPI data into (rounded) doubles
SPI_Time_Series$SPI_year <- as.integer(SPI_Time_Series$SPI_year)
SPI_Time_Series$SPI_rank <- as.integer(SPI_Time_Series$SPI_rank)
View(SPI_Time_Series)
# Change rank and year into integer values and all other numeric SPI data into (rounded) doubles
SPI_Time_Series$SPI_year <- as.integer(SPI_Time_Series$SPI_year)
SPI_Time_Series$SPI_rank <- as.integer(SPI_Time_Series$SPI_rank)
SPI_Time_Series <- SPI_Time_Series %>%
mutate(across(-c(1:6), ~ round(as.numeric(as.character(.)),4)))
# Import datasets
datasets <- list(
caloric_supply <- read.csv(files$caloric_supply) %>%
filter(Code != "", Year >= 1990 & Year <= 2020) %>%
rename(Country = Entity, SPI_year = Year, Daily_calorie_supply_per_person = Daily.calorie.supply.per.person)%>%
mutate(SPI_year = as.integer(SPI_year), Daily_calorie_supply_per_person = as.numeric(Daily_calorie_supply_per_person)) %>%
select(all_of(c("Country", "SPI_year", "Daily_calorie_supply_per_person"))),
healthy_life_expectancy <- read.csv(files$healthy_life_expectancy) %>%
filter(Indicator == "Healthy life expectancy (HALE) at birth (years)" & Dim1 == "Both sexes") %>%
select(Country = Location, SPI_year = Period, Healthy_Life_Expectancy = FactValueNumeric) %>%
mutate(SPI_year = as.integer(SPI_year), Healthy_Life_Expectancy = as.numeric(Healthy_Life_Expectancy)) %>%
select(all_of(c("Country", "SPI_year", "Healthy_Life_Expectancy"))),
protein_supply <- read.csv(files$protein_supply) %>%
rename(Country = Country, SPI_year = Year, Protein_supply = Food.supply..Protein.g.per.capita.per.day.) %>%
mutate(SPI_year = as.integer(SPI_year), Protein_supply = as.numeric(Protein_supply)) %>%
select(all_of(c("Country", "SPI_year", "Protein_supply"))),
child_mortality <- read.csv(files$child_mortality) %>%
filter(Dim1 == "Both sexes", Period >= 1990, Period <= 2020) %>%
select(Country = Location, SPI_year = Period, Child_Mortality = FactValueNumeric) %>%
mutate(SPI_year = as.integer(SPI_year), Child_Mortality = as.numeric(Child_Mortality)) %>%
select(all_of(c("Country", "SPI_year", "Child_Mortality"))),
physicians <- read.csv(files$physicians)[-c(8247:8251), ] %>%
select(Country = Country.Name, SPI_year = Year, Physicians_per_1000 = Physicians..per.1.000.people...SH.MED.PHYS.ZS.) %>%
mutate(SPI_year = as.integer(SPI_year), Physicians_per_1000 = as.numeric(Physicians_per_1000)) %>%
select(all_of(c("Country", "SPI_year", "Physicians_per_1000"))),
hospital_beds <- read.csv(files$hospital_beds)[-c(8247:8251), ] %>%
select(Country = Country.Name, SPI_year = Time, Hospital_Beds_per_1000 = Hospital.beds..per.1.000.people...SH.MED.BEDS.ZS.) %>%
mutate(SPI_year = as.integer(SPI_year), Hospital_Beds_per_1000 = as.numeric(Hospital_Beds_per_1000)) %>%
select(all_of(c("Country", "SPI_year", "Hospital_Beds_per_1000")))
#essential_health_services <- read_excel(files$essential_health_services, sheet = "Goal3") %>%
#select(Country = GeoAreaName, SPI_year = TimePeriod, Essential_Health_Coverage = Value) %>%
#mutate(SPI_year = as.integer(SPI_year))
)
# Merging datasets by 'Country' and 'SPI_year'
Basic_Human_Needs <- SPI_Time_Series
for (dataset in datasets) {
Basic_Human_Needs <- left_join(Basic_Human_Needs, dataset, by = c("Country", "SPI_year"))
}
# Display final data
head(Basic_Human_Needs)
View(Basic_Human_Needs)
rm(list = ls())
tableau_db <- data.frame()
setwd("C:/runGTAP375/Game_theory_2024/1_Code")
list_parameter <- c("qoes")
## Scenarios
# Un-comment the line below and comment the line above to run one single scenario
scenarios <- c("Scenario_D")
#list_approach <- c("Realistic_wo_china")
list_approach <- c("Realistic_wo_china","Idealist","Realistic_wi_china", "Diplomatic")
for (approach in list_approach){
for (p in list_parameter){
for (name in length(scenarios)) {
iter_db <- data.frame()
reset_db <- data.frame()
ev_db <- data.frame()# Create an empty data frame to store the aggregated data
luc_db <- data.frame()
scenario_path <- file.path(parent_folder, "3_Output",approach, p, scenarios[[name]])
file_iter_names <- list.files(path = scenario_path, pattern = "Iter_Region_\\d+\\.txt", full.names = TRUE)
file_reset_names <- list.files(path = scenario_path, pattern = "Reset_Region_\\d+\\.txt", full.names = TRUE)
file_ev_names <- list.files(path = scenario_path, pattern = "Equivalent_Variation_round_\\d+\\.txt", full.names = TRUE)
file_luc_names <- list.files(path = scenario_path, pattern = "Forest_LU_Region_Ha_\\d+\\.txt", full.names = TRUE)
for(file in file_iter_names) {
# Read the txt file into a data frame
iter_raw <- read.table(file, header = FALSE, sep = "\t", col.names= "Country")  # Assuming the files are tab-separated
if(nrow(iter_raw) == 0) {
warning(paste("File is empty:", file))
next
}
# Extract the iteration number from the filename
iteration_number <- gsub(".*Iter_Region_([0-9]+)\\.txt$", "\\1", file)
# Add new columns to iter_raw with the iteration number and scenario
iter_raw$Iteration <- as.integer(iteration_number)
iter_raw$Scenario <- scenarios[[name]]
iter_raw$Club <- "inside"
# Append the data to the aggregated data frame
iter_db <- bind_rows(iter_db, iter_raw)
}
for(file in file_reset_names) {
# Read the txt file into a data frame
reset_raw <- read.table(file, header = FALSE, sep = "\t", col.names= "Country")  # Assuming the files are tab-separated
if(nrow(reset_raw) == 0) {
warning(paste("File is empty:", file))
next
}
# Extract the iteration number from the filename
reset_number <- gsub(".*Reset_Region_([0-9]+)\\.txt$", "\\1", file)
# Add new columns to iter_raw with the iteration number and scenario
reset_raw$Iteration <- as.integer(reset_number)
reset_raw$Scenario <- scenarios[[name]]
reset_raw$Club <- "outside"
# Append the data to the aggregated data frame
reset_db <- bind_rows(reset_db, reset_raw)
}
for(file in file_luc_names) {
# Read the txt file into a data frame
luc_raw <- read.table(file, header = FALSE, sep = " ",)  # Assuming the files are tab-separated
# Add new columns to iter_raw with the iteration number and scenario
luc_number <- gsub(".*Forest_LU_Region_Ha_([0-9]+)\\.txt$", "\\1", file)
luc_raw$Iteration <- as.integer(luc_number)
luc_raw$Scenario <- scenarios[[name]]
luc_raw <- luc_raw %>% rename (Country = V1,
New18 = V2,New17 = V3,New16 = V4,New15 = V5,New14 = V6,New13 = V7,
New12 = V8,New11 = V9,New10 = V10,New9 = V11,New8 = V12,New7 = V13,
New6 = V14,New5 = V15,New4 = V16,New3 = V17,New2 = V18,New1 = V19)
# Append the data to the aggregated data frame
luc_db <- bind_rows(luc_db, luc_raw)
}
for(file in file_ev_names) {
# Read the txt file into a data frame
ev_raw <- read.table(file, header = FALSE, sep = " ", col.names= c("Country", "EV_previous_round", "EV","Iteration"))  # Assuming the files are tab-separated
# Add new columns to iter_raw with the iteration number and scenario
ev_raw$Scenario <- scenarios[[name]]
# Append the data to the aggregated data frame
ev_db <- bind_rows(ev_db, ev_raw)
}
db_df <- rbind(iter_db, reset_db)
ev_db['Iteration'] <- (ev_db['Iteration']-1)
ev_db <- inner_join( luc_db, ev_db, by=c('Country'='Country', 'Iteration'='Iteration', 'Scenario'='Scenario'))
db <- inner_join(db_df, ev_db, by=c('Country'='Country', 'Iteration'='Iteration', 'Scenario'='Scenario'))
df_producer <- data.frame(Country = list_producer_countries, tag = "producer")
df_non_producer <- data.frame(Country = list_non_producer_countries, tag = "non-producer")
# Combine the two data frames
df_combined <- rbind(df_producer, df_non_producer)
#tag tehm
db_tagged <- merge(db, df_combined, by = "Country", all.x = TRUE)
db_tagged['parameter'] <- p
db_tagged['Approach'] <- approach
condition <- db_tagged$Iteration == 0
condition_2 <- db_tagged$Country == 'eu27'
# # Use a temporary variable to swap values
temp <- db_tagged$EV[condition]
db_tagged$EV[condition] <- db_tagged$EV_previous_round[condition]
db_tagged$EV_previous_round[condition] <- temp
db_tagged$Club[condition_2] <- 'inside'
#save them
#save_path <- file.path(parent_folder, "4_DB",approach,p,"Database_GTAPAEZ_results_2024.xlsx")
#write_xlsx(db_tagged, save_path)
tableau_db <- bind_rows(tableau_db,db_tagged)
iter_db <- NULL
reset_db <- NULL
ev_db <- NULL
file_iter_names <- NULL
file_reset_names <- NULL
file_ev_names <- NULL
db_tagged <- NULL
}
}
}
script_path <- getSourceEditorContext()$path
script_folder <- dirname(script_path)
parent_folder <- dirname(script_folder)
GTAPAEZ_path <- file.path(parent_folder, "2_Model/")
external_data_path <- file.path(parent_folder, "0_External_data/")
tableau_db <- data.frame()
for (approach in list_approach){
for (p in list_parameter){
for (name in length(scenarios)) {
iter_db <- data.frame()
reset_db <- data.frame()
ev_db <- data.frame()# Create an empty data frame to store the aggregated data
luc_db <- data.frame()
scenario_path <- file.path(parent_folder, "3_Output",approach, p, scenarios[[name]])
file_iter_names <- list.files(path = scenario_path, pattern = "Iter_Region_\\d+\\.txt", full.names = TRUE)
file_reset_names <- list.files(path = scenario_path, pattern = "Reset_Region_\\d+\\.txt", full.names = TRUE)
file_ev_names <- list.files(path = scenario_path, pattern = "Equivalent_Variation_round_\\d+\\.txt", full.names = TRUE)
file_luc_names <- list.files(path = scenario_path, pattern = "Forest_LU_Region_Ha_\\d+\\.txt", full.names = TRUE)
for(file in file_iter_names) {
# Read the txt file into a data frame
iter_raw <- read.table(file, header = FALSE, sep = "\t", col.names= "Country")  # Assuming the files are tab-separated
if(nrow(iter_raw) == 0) {
warning(paste("File is empty:", file))
next
}
# Extract the iteration number from the filename
iteration_number <- gsub(".*Iter_Region_([0-9]+)\\.txt$", "\\1", file)
# Add new columns to iter_raw with the iteration number and scenario
iter_raw$Iteration <- as.integer(iteration_number)
iter_raw$Scenario <- scenarios[[name]]
iter_raw$Club <- "inside"
# Append the data to the aggregated data frame
iter_db <- bind_rows(iter_db, iter_raw)
}
for(file in file_reset_names) {
# Read the txt file into a data frame
reset_raw <- read.table(file, header = FALSE, sep = "\t", col.names= "Country")  # Assuming the files are tab-separated
if(nrow(reset_raw) == 0) {
warning(paste("File is empty:", file))
next
}
# Extract the iteration number from the filename
reset_number <- gsub(".*Reset_Region_([0-9]+)\\.txt$", "\\1", file)
# Add new columns to iter_raw with the iteration number and scenario
reset_raw$Iteration <- as.integer(reset_number)
reset_raw$Scenario <- scenarios[[name]]
reset_raw$Club <- "outside"
# Append the data to the aggregated data frame
reset_db <- bind_rows(reset_db, reset_raw)
}
for(file in file_luc_names) {
# Read the txt file into a data frame
luc_raw <- read.table(file, header = FALSE, sep = " ",)  # Assuming the files are tab-separated
# Add new columns to iter_raw with the iteration number and scenario
luc_number <- gsub(".*Forest_LU_Region_Ha_([0-9]+)\\.txt$", "\\1", file)
luc_raw$Iteration <- as.integer(luc_number)
luc_raw$Scenario <- scenarios[[name]]
luc_raw <- luc_raw %>% rename (Country = V1,
New18 = V2,New17 = V3,New16 = V4,New15 = V5,New14 = V6,New13 = V7,
New12 = V8,New11 = V9,New10 = V10,New9 = V11,New8 = V12,New7 = V13,
New6 = V14,New5 = V15,New4 = V16,New3 = V17,New2 = V18,New1 = V19)
# Append the data to the aggregated data frame
luc_db <- bind_rows(luc_db, luc_raw)
}
for(file in file_ev_names) {
# Read the txt file into a data frame
ev_raw <- read.table(file, header = FALSE, sep = " ", col.names= c("Country", "EV_previous_round", "EV","Iteration"))  # Assuming the files are tab-separated
# Add new columns to iter_raw with the iteration number and scenario
ev_raw$Scenario <- scenarios[[name]]
# Append the data to the aggregated data frame
ev_db <- bind_rows(ev_db, ev_raw)
}
db_df <- rbind(iter_db, reset_db)
ev_db['Iteration'] <- (ev_db['Iteration']-1)
ev_db <- inner_join( luc_db, ev_db, by=c('Country'='Country', 'Iteration'='Iteration', 'Scenario'='Scenario'))
db <- inner_join(db_df, ev_db, by=c('Country'='Country', 'Iteration'='Iteration', 'Scenario'='Scenario'))
df_producer <- data.frame(Country = list_producer_countries, tag = "producer")
df_non_producer <- data.frame(Country = list_non_producer_countries, tag = "non-producer")
# Combine the two data frames
df_combined <- rbind(df_producer, df_non_producer)
#tag tehm
db_tagged <- merge(db, df_combined, by = "Country", all.x = TRUE)
db_tagged['parameter'] <- p
db_tagged['Approach'] <- approach
condition <- db_tagged$Iteration == 0
condition_2 <- db_tagged$Country == 'eu27'
# # Use a temporary variable to swap values
temp <- db_tagged$EV[condition]
db_tagged$EV[condition] <- db_tagged$EV_previous_round[condition]
db_tagged$EV_previous_round[condition] <- temp
db_tagged$Club[condition_2] <- 'inside'
#save them
#save_path <- file.path(parent_folder, "4_DB",approach,p,"Database_GTAPAEZ_results_2024.xlsx")
#write_xlsx(db_tagged, save_path)
tableau_db <- bind_rows(tableau_db,db_tagged)
iter_db <- NULL
reset_db <- NULL
ev_db <- NULL
file_iter_names <- NULL
file_reset_names <- NULL
file_ev_names <- NULL
db_tagged <- NULL
}
}
}
list_producer_countries <- c("angdrc", "argentina", "bolivia", "brasil",
"colombia","ghana","ivorycoast",
"indonesia","malasya","paraguay","peru")
list_non_producer_countries <- c("madagascar","mozambique","myanmar", "nigeria", "uruguay","venezuela",
"newzealand","oceania","china","india","japan","korea","eastasia",
"seasia","southasia","us","canada", "mexico","latinamer","eu27",
"uk","russia","efta","mena","ssa","restofworld")
list_commodity <- c("sgr", "ruminant", "gro", "ocr",
"osd","pcr","pfb",
"v_f","wht")
list_aez <- c("new18","new17","new16","new15","new14","new13","new12",
"new11","new10","new9","new8","new7","new6","new5","new4","new3","new2","new1")
for (approach in list_approach){
for (p in list_parameter){
for (name in length(scenarios)) {
iter_db <- data.frame()
reset_db <- data.frame()
ev_db <- data.frame()# Create an empty data frame to store the aggregated data
luc_db <- data.frame()
scenario_path <- file.path(parent_folder, "3_Output",approach, p, scenarios[[name]])
file_iter_names <- list.files(path = scenario_path, pattern = "Iter_Region_\\d+\\.txt", full.names = TRUE)
file_reset_names <- list.files(path = scenario_path, pattern = "Reset_Region_\\d+\\.txt", full.names = TRUE)
file_ev_names <- list.files(path = scenario_path, pattern = "Equivalent_Variation_round_\\d+\\.txt", full.names = TRUE)
file_luc_names <- list.files(path = scenario_path, pattern = "Forest_LU_Region_Ha_\\d+\\.txt", full.names = TRUE)
for(file in file_iter_names) {
# Read the txt file into a data frame
iter_raw <- read.table(file, header = FALSE, sep = "\t", col.names= "Country")  # Assuming the files are tab-separated
if(nrow(iter_raw) == 0) {
warning(paste("File is empty:", file))
next
}
# Extract the iteration number from the filename
iteration_number <- gsub(".*Iter_Region_([0-9]+)\\.txt$", "\\1", file)
# Add new columns to iter_raw with the iteration number and scenario
iter_raw$Iteration <- as.integer(iteration_number)
iter_raw$Scenario <- scenarios[[name]]
iter_raw$Club <- "inside"
# Append the data to the aggregated data frame
iter_db <- bind_rows(iter_db, iter_raw)
}
for(file in file_reset_names) {
# Read the txt file into a data frame
reset_raw <- read.table(file, header = FALSE, sep = "\t", col.names= "Country")  # Assuming the files are tab-separated
if(nrow(reset_raw) == 0) {
warning(paste("File is empty:", file))
next
}
# Extract the iteration number from the filename
reset_number <- gsub(".*Reset_Region_([0-9]+)\\.txt$", "\\1", file)
# Add new columns to iter_raw with the iteration number and scenario
reset_raw$Iteration <- as.integer(reset_number)
reset_raw$Scenario <- scenarios[[name]]
reset_raw$Club <- "outside"
# Append the data to the aggregated data frame
reset_db <- bind_rows(reset_db, reset_raw)
}
for(file in file_luc_names) {
# Read the txt file into a data frame
luc_raw <- read.table(file, header = FALSE, sep = " ",)  # Assuming the files are tab-separated
# Add new columns to iter_raw with the iteration number and scenario
luc_number <- gsub(".*Forest_LU_Region_Ha_([0-9]+)\\.txt$", "\\1", file)
luc_raw$Iteration <- as.integer(luc_number)
luc_raw$Scenario <- scenarios[[name]]
luc_raw <- luc_raw %>% rename (Country = V1,
New18 = V2,New17 = V3,New16 = V4,New15 = V5,New14 = V6,New13 = V7,
New12 = V8,New11 = V9,New10 = V10,New9 = V11,New8 = V12,New7 = V13,
New6 = V14,New5 = V15,New4 = V16,New3 = V17,New2 = V18,New1 = V19)
# Append the data to the aggregated data frame
luc_db <- bind_rows(luc_db, luc_raw)
}
for(file in file_ev_names) {
# Read the txt file into a data frame
ev_raw <- read.table(file, header = FALSE, sep = " ", col.names= c("Country", "EV_previous_round", "EV","Iteration"))  # Assuming the files are tab-separated
# Add new columns to iter_raw with the iteration number and scenario
ev_raw$Scenario <- scenarios[[name]]
# Append the data to the aggregated data frame
ev_db <- bind_rows(ev_db, ev_raw)
}
db_df <- rbind(iter_db, reset_db)
ev_db['Iteration'] <- (ev_db['Iteration']-1)
ev_db <- inner_join( luc_db, ev_db, by=c('Country'='Country', 'Iteration'='Iteration', 'Scenario'='Scenario'))
db <- inner_join(db_df, ev_db, by=c('Country'='Country', 'Iteration'='Iteration', 'Scenario'='Scenario'))
df_producer <- data.frame(Country = list_producer_countries, tag = "producer")
df_non_producer <- data.frame(Country = list_non_producer_countries, tag = "non-producer")
# Combine the two data frames
df_combined <- rbind(df_producer, df_non_producer)
#tag tehm
db_tagged <- merge(db, df_combined, by = "Country", all.x = TRUE)
db_tagged['parameter'] <- p
db_tagged['Approach'] <- approach
condition <- db_tagged$Iteration == 0
condition_2 <- db_tagged$Country == 'eu27'
# # Use a temporary variable to swap values
temp <- db_tagged$EV[condition]
db_tagged$EV[condition] <- db_tagged$EV_previous_round[condition]
db_tagged$EV_previous_round[condition] <- temp
db_tagged$Club[condition_2] <- 'inside'
#save them
#save_path <- file.path(parent_folder, "4_DB",approach,p,"Database_GTAPAEZ_results_2024.xlsx")
#write_xlsx(db_tagged, save_path)
tableau_db <- bind_rows(tableau_db,db_tagged)
iter_db <- NULL
reset_db <- NULL
ev_db <- NULL
file_iter_names <- NULL
file_reset_names <- NULL
file_ev_names <- NULL
db_tagged <- NULL
}
}
}
mapping <- list(
angdrc = c('AGO', 'COD'),
argentina = c('ARG'),
bolivia = c('BOL'),
brasil = c('BRA'),
canada = c('CAN'),
china = c('CHN'),
colombia = c('COL'),
eastasia = c('HKG', 'MAC', 'PRK', 'TWN', 'MNG', 'BRN'),
EFTA = c('ISL', 'NOR', 'CHE'),
eu27 = c('AUT', 'BEL', 'BGR', 'HRV', 'CYP', 'CZE', 'DNK', 'EST', 'FIN',
'FRA', 'DEU', 'GRC', 'HUN', 'IRL', 'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD',
'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE', 'REU', 'GLP', 'MTQ'),
ghana = c('GHA'),
india = c('IND'),
indonesia = c('IDN'),
ivorycoast = c('CIV'),
japan = c('JPN'),
korea = c('KOR'),
latinamer = c('AIA', 'ATG', 'ABW', 'BHS', 'BRB', 'VGB', 'CYM', 'CUB', 'DMA',
'DOM', 'GRD', 'HTI', 'JAM', 'MSR', 'PRI', 'KNA', 'LCA', 'VCT',
'TTO', 'TCA', 'VIR', 'BLZ', 'CRI', 'SLV', 'GTM', 'HND', 'NIC', 'PAN',
'CHL', 'ECU', 'FLK', 'GUF', 'GUY', 'SGS', 'SUR', 'URY'),
madagascar = c('MDG'),
malasya = c('MYS'),
mena = c('DZA', 'EGY', 'LBY', 'MAR', 'TUN', 'ESH', 'IRN', 'IRQ', 'ISR', 'JOR',
'KWT', 'LBN', 'OMN', 'QAT', 'SAU', 'SYR', 'TUR', 'ARE', 'YEM'),
mexico = c('MEX'),
mozambique = c('MOZ'),
myanmar = c('MMR'),
newzealand = c('NZL'),
nigeria = c('NGR'),
oceania = c('AUS', 'FJI', 'NCL', 'PNG', 'SLB', 'VUT', 'GUM', 'KIR', 'MHL',
'FSM', 'NRU', 'MNP', 'PLW', 'UMI', 'ASM', 'COK', 'PYF', 'NIU', 'PCN',
'WSM', 'TKL', 'TON', 'TUV', 'WLF'),
paraguay = c('PRY'),
peru = c('PER'),
restofworld = c('IOT', 'ATF', 'BVT', 'BMU', 'GRL', 'SPM', 'ATA', 'KAZ',
'KGZ', 'TJK', 'TKM', 'UZB', 'ARM', 'AZE', 'GEO', 'BLR',
'MDA', 'UKR', 'GGY', 'JEY', 'FRO', 'IMN', 'ALB', 'AND',
'BIH', 'GIB', 'VAT', 'MNE', 'MKD', 'SMR', 'SRB', 'LIE', 'MCO'),
russia = c('RUS'),
seasia = c('KHM', 'LAO', 'PHL', 'SGP', 'THA', 'TLS', 'VNM'),
southasia = c('AFG', 'BGD', 'BTN',  'MDV', 'NPL', 'PAK', 'LKA'),
ssa = c('SDN', 'SSD','BDI', 'COM', 'DJI', 'ERI', 'ETH', 'KEN', 'MWI', 'MUS',
'MYT', 'RWA', 'SYC', 'SOM', 'UGA', 'TZA', 'ZMB', 'ZWE', 'CMR',
'CAF', 'TCD', 'COG', 'GNQ', 'GAB', 'STP', 'BWA', 'SWZ', 'LSO', 'NAM',
'ZAF', 'BEN', 'BFA', 'CPV', 'GMB', 'GIN', 'GNB', 'LBR', 'MLI',
'MRT', 'NER', 'SHN', 'SEN', 'SLE', 'TGO'),
uk = c('GBR'),
efta = c('NOR','ISL','CHE','LIE'),
uruguay = c('URY'),
us = c('USA'),
venezuela = c('VEN')
)
#Function to split country groups into separate rows
split_countries <- function(row) {
countries <- mapping[[row$Country]]
data.frame(
ISO = countries,
country_group = rep(row$Country, length(countries)),
Boreal_High1Humidity = rep(row$New18, length(countries)),
Boreal_Normal1Humidity = rep(row$New17, length(countries)),
Boreal_Low1Humidity = rep(row$New16, length(countries)),
Boreal_Moist1Semiarid = rep(row$New15, length(countries)),
Boreal_Dry1Semiarid = rep(row$New14, length(countries)),
Boreal_Arid1Arid= rep(row$New13, length(countries)),
Temperate_High1Humidity = rep(row$New12, length(countries)),
Temperate_Normal1Humidity = rep(row$New11, length(countries)),
Temperate_Low1Humidity = rep(row$New10, length(countries)),
Temperate_Moist1Semiarid = rep(row$New9, length(countries)),
Temperate_Dry1Semiarid = rep(row$New8, length(countries)),
Temperate_Arid1Arid= rep(row$New7, length(countries)),
Tropical_High1Humidity = rep(row$New6, length(countries)),
Tropical_Normal1Humidity = rep(row$New5, length(countries)),
Tropical_Low1Humidity = rep(row$New4, length(countries)),
Tropical_Moist1Semiarid = rep(row$New3, length(countries)),
Tropical_Dry1Semiarid = rep(row$New2, length(countries)),
Tropical_Arid1Arid= rep(row$New1, length(countries)),
Approach = rep(row$Approach, length(countries)),
Iteration = rep(row$Iteration, length(countries)),
Scenario = rep(row$Scenario, length(countries)),
Club = rep(row$Club, length(countries)),
EV_previous_round = rep(row$EV_previous_round, length(countries)),
EV = rep(row$EV, length(countries)),
tag = rep(row$tag, length(countries)),
parameter = rep(row$parameter, length(countries))
)
}
# Apply the function to each row and concatenate the results
split_df <- do.call(rbind, lapply(1:nrow(tableau_db), function(i) split_countries(tableau_db[i, ])))
split_df <- split_df %>%
rename(Country = country_group)
split_df  <- split_df %>%
pivot_longer(
cols = starts_with("Boreal_") | starts_with("Temperate_") | starts_with("Tropical_"),
names_to = c("Climate_Type", "Humidity_Level"),
names_sep = "_",
values_to = "Value"
)
save_path <- file.path(parent_folder, "4_DB","Database_GTAPAEZ_all_results_2024.csv")
write.csv(split_df , save_path, row.names = FALSE)
