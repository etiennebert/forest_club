data = read_SL4('NATDEF.sl4')
equivalent_variation = data["ev"]
df <- data.frame(equivalent_variation)
values_EV <- unlist(df)
values_EV <- as.numeric(values_EV)
# Return the vector
return(values_EV)
}
selection_region <- function(prvs_values_EV, values_EV, region_sets, iter){
#' Select the region names that have a EV<0
#' @iter indicates the iteration number but is not included into the calculation
#' Run the GEMPACK executable, read the EV results from the SL4 output of the simulation
#' and return the EV as a numeric vector of x values (x: number of countries into the simulation)
output_table = cbind(region_sets, prvs_values_EV, values_EV, iter)
df_3 <- data.frame(output_table)
df_3$prvs_values_EV <- as.numeric(df_3$prvs_values_EV)
df_3$values_EV <- as.numeric(df_3$values_EV)
df_4 <- df_3[df_3$values_EV > df_3$prvs_values_EV , ]
df_4 <- subset(df_4, select = -prvs_values_EV)
region_positiv_EV <- df_4[[1]]
l = iter-1
# Write the vector to a file. Include the iteration number in the file name.
write.table(output_table, file = paste0(save_path, "Equivalent_Variation_round_", l, ".txt"), row.names = FALSE, col.names = FALSE)
# Return the vector
return(region_positiv_EV)
}
move_producer_coalition <- function(iter_region) {
producer_coalition <- intersect(iter_region, list_producer_countries)
iter_region <- setdiff(iter_region, producer_coalition)
return(list(iter_region = iter_region, producer_coalition = producer_coalition))
}
move_producer_reset <- function(reset_region) {
producer_reset <- intersect(reset_region, list_producer_countries)
reset_region <- setdiff(reset_region, producer_reset)
return(list(reset_region = reset_region, producer_reset = producer_reset))
}
shock_eu27<- function(shock, outside_producer, outside_non_producer) {
for(producer in outside_producer) {
for(commodity in list_commodity) {
shock[["0101"]][commodity, producer, "eu27"] <- shock_values_tmsf[[producer]][commodity]
}
}
for(non_producer in outside_non_producer) {
shock[["0101"]]["sgr",non_producer,"eu27"] <- 3.56
shock[["0101"]]["ruminant",non_producer,"eu27"] <- 1.68
shock[["0101"]]["gro",non_producer,"eu27"] <- 6.19
shock[["0101"]]["ocr",non_producer,"eu27"] <- 7.48
shock[["0101"]]["osd",non_producer,"eu27"] <- 5.62
shock[["0101"]]["pcr",non_producer,"eu27"] <- 1.47
shock[["0101"]]["pfb",non_producer,"eu27"] <- 7.22
shock[["0101"]]["v_f",non_producer,"eu27"] <- 5.51
shock[["0101"]]["wht",non_producer,"eu27"] <- 5.69
}
return(shock)
}
shock_ABCD <- function(shock, club_non_producer, outside_producer) {
for(club in club_non_producer) {
for(producer in outside_producer) {
for(commodity in list_commodity) {
shock[["0101"]][commodity, producer, club] <- shock_values_tmsf[[producer]][commodity]
}
}
}
return(shock)
}
shock_BD <- function(shock, club_non_producer, outside_non_producer) {
for(club in club_non_producer) {
for(non_producer in outside_non_producer) {
shock[["0101"]]["sgr",non_producer, club] <- 3.56
shock[["0101"]]["ruminant",non_producer, club] <- 1.68
shock[["0101"]]["gro",non_producer, club] <- 6.19
shock[["0101"]]["ocr",non_producer, club] <- 7.48
shock[["0101"]]["osd",non_producer, club] <- 5.62
shock[["0101"]]["pcr",non_producer, club] <- 1.47
shock[["0101"]]["pfb",non_producer, club] <- 7.22
shock[["0101"]]["v_f",non_producer, club] <- 5.51
shock[["0101"]]["wht",non_producer, club] <- 5.69
}
}
return(shock)
}
shock_D <- function(shock, club_producer, outside_non_producer) {
for(club in club_producer) {
for(non_producer in outside_non_producer) {
shock[["0101"]]["sgr",non_producer, club] <- 3.56
shock[["0101"]]["ruminant",non_producer, club] <- 1.68
shock[["0101"]]["gro",non_producer, club] <- 6.19
shock[["0101"]]["ocr",non_producer, club] <- 7.48
shock[["0101"]]["osd",non_producer, club] <- 5.62
shock[["0101"]]["pcr",non_producer, club] <- 1.47
shock[["0101"]]["pfb",non_producer, club] <- 7.22
shock[["0101"]]["v_f",non_producer, club] <- 5.51
shock[["0101"]]["wht",non_producer, club] <- 5.69
}
}
return(shock)
}
shock_CD <- function(shock, club_producer, outside_producer) {
for(club in club_producer) {
for(producer in outside_producer) {
for(commodity in list_commodity) {
shock[["0101"]][commodity, producer, club] <- shock_values_tmsf[[producer]][commodity]
}
}
}
return(shock)
}
# Function to update the .cmf file
update_cmf_file <- function(new_text,i) {
# Read the file
cmf_path <- paste0(GTAPAEZ_path,"/NATDEF.cmf")
lines <- readLines(cmf_path, warn = FALSE)
# Find the line number for "Rest Endogenous;"
cutoff_line <- which(lines == "! Part for productivity shocks from R;")
# Check if the line was found
if (length(cutoff_line) == 0) {
stop("The line 'Rest Endogenous ;' was not found in the file.")
}
# Keep all lines up to and including "Rest Endogenous;"
lines <- lines[1:cutoff_line]
# Append new text
lines <- c(lines, new_text)
# Write the updated content back to the file
writeLines(lines, cmf_path)
filename = paste0(save_path,"CMF_iter_", i, ".cmf")
# Modify lines to remove " and \
cleaned_lines = gsub('"', '', lines)  # Remove double quotes
cleaned_lines = gsub('\\\\', '', cleaned_lines)  # Remove backslashes, note double escape to represent a single backslash
# Write to file without quotes and backslashes
write.table(cleaned_lines, filename, sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
}
# Function to generate text for each country
generate_swap_for_qo <- function(country) {
swap_qo <- c()  # Create an empty vector to store results
for(commodity in list_commodity) {
line <- paste("swap qo(\"", commodity, "\",\"", country, "\") = aoall(\"", commodity, "\",\"", country, "\");", sep = "")
swap_qo <- c(swap_qo, line)  # Append the generated string to the results
}
return(swap_qo)
}
generate_shock_for_qo <- function(club_producer) {
results_qo <- c()  # Create an empty vector to store results
for(producer in club_producer) {
for(commodity in list_commodity) {
value <- shock_values_qo[[producer]][commodity]
line <- paste("Shock qo(\"", commodity, "\",\"", producer, "\") = ", value, ";", sep = "")
results_qo <- c(results_qo, line)  # Append the generated string to the results
}
}
return(results_qo)
}
generate_text_for_qxw <- function(club_producer) {
results_qxw <- c()  # Create an empty vector to store results
for(producer in club_producer) {
for(commodity in list_commodity) {
value <- shock_values_qxw[[producer]][commodity]
if (value < 0) {
line_shock <- paste("Shock qxw(\"", commodity, "\",\"", producer, "\") = ", value, ";", sep = "")
line_swap <- paste("swap qxw(\"", commodity, "\",\"", producer, "\")=tmf_f(\"", commodity, "\",\"", producer, "\");", sep = "")
results_qxw <- c(results_qxw, line_swap, line_shock)  # Append the generated string to the results
}
}
}
return(results_qxw)
}
generate_text_for_qoes <- function(club_producer) {
results_qoes <- c()  # Create an empty vector to store results
for(producer in club_producer) {
for(commodity in list_commodity) {
for (i in 1:18) {
shock_index <- paste0("new", i)
shock_value_var_name <- paste0("shock_value_aez_", i)
shock_value_var <- get(shock_value_var_name)
value <- shock_value_var[[producer]][[commodity]]
if (value < 0) {
line_shock <- paste("Shock qoes(\"", shock_index, "\", \"", commodity, "\",\"", producer, "\")=", value, ";", sep = "")
line_swap <- paste("swap qoes(\"", shock_index, "\", \"", commodity, "\", \"", producer, "\")=afeall(\"", shock_index, "\", \"", commodity, "\", \"", producer, "\");", sep = "")
results_qoes <- c(results_qoes, line_swap, line_shock)
}  # Append the generated string to the results
}
}
}
return(results_qoes)
}
for (parameter in list_parameter){
for (approach in list_approach){
for(scenario in scenarios) {
save_path <- file.path(parent_folder, "3_Output",approach, parameter,scenario,"/")
# Store the original shock data
original_shock = read_har('NATDEF.har')
# Initialize an empty list to hold the outputs
outputs <- list()
area <- list()
iter_area <- list()
iter_area_producer <- list()
iter_area_wo_producer <- list()
reset_area <- list()
reset_area_producer <- list()
reset_area_wo_producer <- list()
iter_region <- list()
iter_region_producer <- list()
iter_region_wo_producer <- list()
reset_region <- list()
reset_region_producer <- list()
reset_region_wo_producer <- list()
# Get the initial output
outputs[[1]] <- init_region(1)
thresholds <- read_excel(paste0(external_data_path,"/",approach,"/Thresholds_GTAPAEZ_Game_theory.xlsx"),sheet=2,col_names= FALSE,col_types=NULL,na="",skip= 0)
thresholds_down <- thresholds[, c(3)]
thresholds <- thresholds[, c(2)]
i <- 1
sign_check <- FALSE
while (!sign_check){
# Get the output from the new run
shock = read_har('NATDEF.har')
cmf <- "NATDEF.cmf"
if (i == 1){
# Combine data, convert to data frame, and change column to numeric
df <- data.frame(region_sets, V2 = as.numeric(outputs[[i]]), i, t = as.numeric(thresholds_down[[i]]))
# Filter rows where V2 is greater than 0 and extract the first column
area[[i]] <- df[(df$V2 > 0) | (df$V2 < 0 & abs(df$V2) < df$t) , "region_sets"]
# Write the output_table_wrt to a file
write.table(cbind(region_sets, outputs[[i]], original_ev_new, i), file = paste0(save_path, "Equivalent_Variation_round_0", ".txt"), row.names = FALSE, col.names = FALSE)
}else {
area[[i]] <- selection_region(outputs[[i-1]], outputs[[i]], region_sets , i)
}
for (r in 1:37) {
# Check if this region had a negative output in the previous iteration
if (i == 1 ) {
iter_area[[i]] <- setNames(area[[i]], paste0("h", seq_along(area[[i]])))
reset_area[[i]] <- setNames(setdiff(region_sets, unlist(iter_area[[i]])), paste0("h", seq_along(setdiff(region_sets, unlist(iter_area[[i]])))))
#Switch for the first iteration
temp <- iter_area[[i]]
iter_area[[i]] <- reset_area[[i]]
reset_area[[i]] <- temp
iter_region <- iter_area[[i]]
reset_region <- reset_area[[i]]
move <- move_producer_coalition(iter_region)
iter_area_wo_producer[[i]] <- move$iter_region
iter_area_producer[[i]]    <- move$producer_coalition
iter_region_wo_producer  <- iter_area_wo_producer[[i]]
iter_region_producer <- iter_area_producer[[i]]
move_reset <- move_producer_reset (reset_region)
reset_area_wo_producer[[i]] <- move_reset$reset_region
reset_area_producer[[i]] <- move_reset$producer_reset
reset_region_wo_producer <- reset_area_wo_producer[[i]]
reset_region_producer <- reset_area_producer[[i]]
}else {
if ((region_sets[[r]] %in% reset_area[[i - 1]] == TRUE && (outputs[[i]][r] > outputs[[i - 1]][r])) ||
(region_sets[[r]] %in% reset_area[[i - 1]] == TRUE && (outputs[[i]][r] < outputs[[i - 1]][r]) && abs((outputs[[i]][r] - outputs[[i - 1]][r]))<thresholds_down[[1]][r]) ||
(region_sets[[r]] %in% iter_area[[i - 1]]  == TRUE && (outputs[[i]][r] < outputs[[i - 1]][r]) && abs((outputs[[i]][r] - outputs[[i - 1]][r]))>thresholds[[1]][r]))
{
# The output was negative in the previous iteration and is positive now
# Add the region to the switched_regions list
reset_region <- c(reset_region, region_sets[r])
reset_area[[i]] <- reset_region
reset_region <- unlist(reset_region)
move_reset <- move_producer_reset (reset_region)
reset_area_wo_producer[[i]] <- move_reset$reset_region
reset_area_producer[[i]] <- move_reset$producer_reset
reset_region_wo_producer <- reset_area_wo_producer[[i]]
reset_region_producer <- reset_area_producer[[i]]
}else {
iter_region <- c(iter_region, region_sets[r])
iter_area[[i]] <- iter_region
iter_region <- unlist(iter_region)
move_producer <- move_producer_coalition(iter_region)
iter_area_wo_producer[[i]] <- move_producer$iter_region
iter_area_producer[[i]] <- move_producer$producer_coalition
iter_region_wo_producer <- iter_area_wo_producer[[i]]
iter_region_producer <- iter_area_producer[[i]]
}
}
}
shock[["0101"]] <- original_shock[["0101"]]
shock <- shock_ABCD(shock, iter_area_wo_producer[[i]], reset_area_producer[[i]])
shock <- shock_eu27(shock, reset_area_producer[[i]], reset_area_wo_producer[[i]])
if (scenario == "Scenario_D") {
shock <- shock_BD(shock, iter_area_wo_producer[[i]], reset_area_wo_producer[[i]] )
}
if (scenario == "Scenario_D") {
shock <- shock_D(shock, iter_area_producer[[i]],reset_area_wo_producer[[i]])
}
if (scenario == "Scenario_C" || scenario == "Scenario_D") {
shock <- shock_CD(shock, iter_area_producer[[i]],reset_area_producer[[i]])}
if(scenario == "Scenario_C" || scenario == "Scenario_D"){
cmf_path <- paste0(GTAPAEZ_path,"/NATDEF.cmf")
lines <- readLines(cmf_path, warn = FALSE)
cutoff_line <- which(lines == "! Part for productivity shocks;")
if (length(cutoff_line) == 0) {
stop("The line 'Rest Endogenous ;' was not found in the file.")
}
# Keep all lines up to and including "Rest Endogenous;"
lines <- lines[1:cutoff_line]
lines_tms_f <- 'Shock tms_f =  file NATDEF.har header "0101";'
lines_tms_f_2 <- '! Part for productivity shocks from R;'
lines <- c(lines,lines_tms_f, lines_tms_f_2)
# Write the updated content back to the file
writeLines(lines, cmf_path)
filename = paste0(save_path,"CMF_iter_", i, ".cmf")
# Modify lines to remove " and \
cleaned_lines = gsub('"', '', lines)  # Remove double quotes
cleaned_lines = gsub('\\\\', '', cleaned_lines)  # Remove backslashes, note double escape to represent a single backslash
# Write to file without quotes and backslashes
write.table(cleaned_lines, filename, sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
}
if(parameter == "qo"){
cmf_path <- paste0(GTAPAEZ_path,"/NATDEF.cmf")
lines <- readLines(cmf_path, warn = FALSE)
method_line_index <- grep("Method =", lines)
step_line_index <- grep("Steps =", lines)
subinterval_line_index <- grep("subintervals =", lines)
accuracy_line_index <- grep("automatic accuracy =", lines)
lines[method_line_index] <- "Method = Euler;"
lines[step_line_index] <- "Steps = 2 4;"
lines[subinterval_line_index] <- "subintervals = 3;"
lines[accuracy_line_index] <- "automatic accuracy = no;"
writeLines(lines, cmf_path)}
# if(parameter == "qxw"){
#
#   cmf_path <- paste0(GTAPAEZ_path,"/NATDEF.cmf")
#   lines <- readLines(cmf_path, warn = FALSE)
#
#   method_line_index <- grep("Method =", lines)
#   step_line_index <- grep("Steps =", lines)
#   subinterval_line_index <- grep("subinterval =", lines)
#   accuracy_line_index <- grep("automatic accuracy =", lines)
#
#   lines[method_line_index] <- "Method = Euler;"
#   lines[step_line_index] <- "Steps = 1 2;"
#   lines[subinterval_line_index] <- "subinterval = 3;"
#   lines[accuracy_line_index] <- "automatic accuracy = no;"
#
#   writeLines(lines, cmf_path)}
if (scenario == "Scenario_D") {
# Generate productivity shock
text_q <- generate_shock_for_qo(iter_area_producer[[i]])
# Generate productivity swap
text_for_all_countries <- sapply(iter_area_producer[[i]], generate_swap_for_qo)
# Flatten text_for_all_countries if it's not already a vector
flattened_text_for_all_countries <- as.vector(text_for_all_countries)
# Combine flattened_text_for_all_countries and text_q into one vector
# Append the additional lines
#additional_lines_1 <- "Shock tms_f = file TMSF.har header \"0083\";"
#combined_text <- c(flattened_text_for_all_countries, text_q, additional_lines_1)
text_qoes <- generate_text_for_qoes(iter_area_producer[[i]])
#text_qoes_for_all_countries <- sapply(iter_area_producer[[i]], generate_swap_for_qoes)
# Flatten text_for_all_countries if it's not already a vector
#flattened_text_qoes_for_all_countries <- as.vector(text_qoes_for_all_countries)'
text_qxw <- generate_text_for_qxw(iter_area_producer[[i]])
if (parameter == "qo"){
combined_text <- c(flattened_text_for_all_countries, text_q)
} else if(parameter == "qoes") {combined_text <-text_qoes
} else {combined_text <-text_qxw}
if (length(combined_text) > 0) {
update_cmf_file(combined_text,i)
}
}
tmsf <- list("0101" = shock[["0101"]])
# write the different shocks
#write_har(tmsf, "TMSF.har" , maxSize = 1e4)
write_har(shock, 'NATDEF.har', maxSize = 1e4)
# write the iteration for control
#filename_2 = paste0(save_path,"tmsf_iter_", i, ".har")
#write_har(tmsf, filename_2 , maxSize = 1e4)
l = i-1
filename_3 = paste0(save_path,"NATDEF_iter_", i, ".har")
write_har(shock, filename_3 , maxSize = 1e4)
# Write the vector to a file. Include the iteration number in the file name.
luc <- forest_data(i)
write.table(luc, file = paste0(save_path,"Forest_LU_Region_Ha_",l, ".txt"), row.names = FALSE, col.names = FALSE)
write.table(reset_region, file = paste0(save_path,"Reset_Region_",l, ".txt"), row.names = FALSE, col.names = FALSE)
write.table(iter_region, file = paste0(save_path,"Iter_Region_",l, ".txt"), row.names = FALSE, col.names = FALSE)
write.table(iter_region_wo_producer, file = paste0(save_path,"Iter_Region_wo_producer_",l, ".txt"), row.names = FALSE, col.names = FALSE)
write.table(iter_region_producer, file = paste0(save_path, "Iter_Region_producer_",l, ".txt"), row.names = FALSE, col.names = FALSE)
write.table(reset_region_wo_producer, file = paste0(save_path, "Reset_Region_wo_producer_",l, ".txt"), row.names = FALSE, col.names = FALSE)
write.table(reset_region_producer, file = paste0(save_path, "Reset_Region_producer_",l, ".txt"), row.names = FALSE, col.names = FALSE)
outputs[[i + 1]] <- run_Gtap(i + 1)
# if (4<i && i<25){
#   # Calculate the difference measure between the current output and the previous one
#   # For example, you can use the sum of absolute differences. Depending on your needs, you might want to use a different measure.
#   #sign_check <- all(outputs[[i + 1]] > outputs[[i]] | outputs[[i + 1]] > outputs[[1]])
#
#   #sign_check <- length(setdiff(iter_area[i], iter_area[i-1])) == 0
#   #comparing with the last 4 iterations
#     for (j in 1:3) {
#       if ((length(setdiff(iter_area[[i]], iter_area[[i - j]])) == 0) && (length(setdiff(iter_area[[i-j]], iter_area[[i]])) == 0)) {
#         sign_check <- TRUE
#         break  # Exit the loop if a match is found
#       }
#     }
# }
if (2<i && i<99){
# Calculate the difference measure between the current output and the previous one
# For example, you can use the sum of absolute differences. Depending on your needs, you might want to use a different measure.
#sign_check <- all(outputs[[i + 1]] > outputs[[i]] | outputs[[i + 1]] > outputs[[1]])
#sign_check <- length(setdiff(iter_area[i], iter_area[i-1])) == 0
#comparing with the last 4 iterations
if ((length(setdiff(iter_area[[i]], iter_area[[i - 1]])) == 0) && (length(setdiff(iter_area[[i-1]], iter_area[[i]])) == 0)) {
sign_check <- TRUE
break  # Exit the loop if a match is found
}
}
if (i == 100){
# Calculate the difference measure between the current output and the previous one
# For example, you can use the sum of absolute differences. Depending on your needs, you might want to use a different measure.
#sign_check <- all(outputs[[i + 1]] > outputs[[i]] | outputs[[i + 1]] > outputs[[1]])
sign_check <- TRUE
}
# Clear the region to reset and Increase the iteration number
reset_region <- NULL
iter_region <- NULL
reset_area_producer[i+1] <- list(NULL)
reset_area_wo_producer[i+1] <- list(NULL)
reset_area[i+1] <- list(NULL)
sl4 <-"NATDEF.sl4"
source_tracker <- file.path(parent_folder, "2_Model", sl4)
destination_tracker <- file.path(save_path, paste0(sub("\\.([^.]+)$", paste0("_", i, ".\\1"), sl4)))
result_tracker <- file.copy(source_tracker, destination_tracker, overwrite = TRUE)
if (result_tracker) {
print(paste("File copy successful for", bu_file))
} else {
print(paste("File copy failed for", bu_file))
}
i <- i + 1
}
## Last, restore the BU from the original RunGTAP
# List of BU files to copy
bu_files <- c("NATDEF.har", "NATDEF.sl4", "NATDEF.cmf", "gdata.upd")
# Source and destination folders are as per your setup
source_folder_copy <- file.path(parent_folder, "2_Model", "BU/")
destination_folder_paste <- GTAPAEZ_path
# Loop to iterate through each BU file
for (bu_file in bu_files) {
# Full path of the source and destination files
source_file_path_copy <- file.path(source_folder_copy, bu_file)
destination_file_path_paste <- file.path(destination_folder_paste, bu_file)
# Check if the source file exists
if (!file.exists(source_file_path_copy)) {
print(paste("Source file does not exist:", bu_file))
next
}
# Check if the destination folder exists
if (!dir.exists(destination_folder_paste)) {
print("Destination folder does not exist.")
next
}
# Attempt to copy and overwrite if the file already exists
result <- file.copy(source_file_path_copy, destination_file_path_paste, overwrite = TRUE)
# Check the result
if (result) {
print(paste("File copy successful for", bu_file))
} else {
print(paste("File copy failed for", bu_file))
}
# Check the result
}
print(paste( scenario,"Processed"))
}
}
}
setwd("~/")
install.packages('devtools')
devtools::install_git('https://github.com/USDA-ERS/MTED-HARr.git')
install.packages("devtools")
#clear the environment
rm(list = ls())
library(devtools)
require(HARr)
data = read_SL4('NATDEF_4.sl4')
setwd("C:/runGTAP375/Game_theory_2024/3_Output/Diplomatic/qoes/Scenario_D")
data = read_SL4('NATDEF_4.sl4')
View(data)
View(data)
data[["charvstarea"]]
data[["charvstarea"],,'CIV']
data[["charvstarea"],'CIV']
data[["charvstarea"]][,,'CIV']
data[["charvstarea"]][,,,'CIV']
data[["psave"]]
data[["psave"]][',']
data[["psave"]]['eu27',]
data[["p_HARVESTAREA"]]['eu27',]
data[["p_HARVESTAREA"]]
data[["p_HARVSTAREA"]]
data[["p_HARVSTAREA_L"]]
data[["p_HARVSTAREA
"]]
data[["HARVSTAREA_L"]]
data[["HARVSTAREA"]]
data[["p_HARVSTAREA"]]
data[["p_harvesrarea_l"]]
data[["p_harvstarea_l"]]
data[["p_harvstarea_l"]][,,'bra']
data[["p_harvstarea_l"]][,,'brasil']
data[["p_harvstarea_l"]][,'brasil']
data[["p_harvstarea_l"]][,'brasil',,]
data[["p_harvstarea_l"]][,'brasil',,]
data[["p_harvstarea_l"]][,'rasil',,]
data[["p_harvstarea_l"]][,'Brasil',,]
data[["p_harvstarea_l"]]
data[["p_harvstarea_l"]][,,'Brasil',]
data[["p_harvstarea_l"]][,,,'Brasil']
data[["p_harvstarea_l"]]['Brasil',,,]
data[["p_harvstarea_l"]][,,,]
data[["p_harvstarea_l"]][,,,'new2']
data[["p_harvstarea_l"]][,,'new2',]
data[["p_harvstarea_l"]][,'new2',,]
data[["p_harvstarea_l"]]['new2',,,]
data[["p_harvstarea_l"]]['new2','pdr',,]
data[["p_harvstarea_l"]]['new2','pdr','brasil',]
data[["p_harvstarea_l"]][,,'brasil',]
